# Carregar a biblioteca httr
library(httr)
# Definir a URL da API meteorológica pública
url_api <- "https://api.openweathermap.org/data/2.5/weather"
# Definir a cidade para a qual você deseja obter os dados climáticos
cidade <- URLencode("São Paulo")
# Definir a chave de API (obtida gratuitamente no site da OpenWeatherMap)
chave_api <- "a029da6b23fdd979bd37e3813c854bb3"
# Montar a URL completa para a requisição
url_completa <- paste0(url_api, "?q=", cidade, "&appid=", chave_api)
# Fazer a requisição GET para a API
resposta <- GET(url_completa)
# Verificar se a requisição foi bem-sucedida
if (status_code(resposta) == 200) {
# Parsear o JSON de resposta
dados_climaticos <- jsonlite::fromJSON(content(resposta, "text"))
# Exibir as informações meteorológicas
print(paste0("Cidade: ", dados_climaticos$name))
print(paste0("Temperatura atual: ", dados_climaticos$main$temp, "°C"))
print(paste0("Umidade do ar: ", dados_climaticos$main$humidity, "%"))
print(paste0("Condição climática: ", dados_climaticos$weather[[1]]$description))
} else {
print("Erro ao obter os dados climáticos")
}
source("~/Apps/FIAP/Fase 1/Atividade 1 - Startup/R_chamar_api_clima.R")
source("~/Apps/FIAP/Fase 1/Atividade 1 - Startup/R_chamar_api_clima.R")
source("~/Apps/FIAP/Fase 1/Atividade 1 - Startup/R_chamar_api_clima.R")
source("~/.active-rstudio-document")
# installing packages
install.packages("httr")
install.packages("httr")
# importing packages
library(httr)
# GET() method will store the raw
# data in r variable
r < - GET("https://geeksforgeeks.org")
# GET() method will store the raw
# data in r variable
l < - GET("https://geeksforgeeks.org")
# importing packages
library(httr)
# GET() method will store the raw
# data in r variable
l < - GET("https://geeksforgeeks.org")
# rawToChar() will convert raw data
# to char and store in response variable
response < - rawToChar(l$content)
# GET() method will store the raw
# data in r variable
l <- 'a'
l < - GET("https://geeksforgeeks.org")
# rawToChar() will convert raw data
# to char and store in response variable
response < - rawToChar(l$content)
# print response
print(response)
sample2 <- GET(“http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA“)
sample2 <- GET("http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
content(sample2)
if (!require(httr)) {
install.packages("httr")
library(httr)
}
sample2 <- GET("http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
content(sample2)
content(sample2)
source("~/.active-rstudio-document")
if (!require(httr)) {
install.packages("httr")
library(httr)
}
sample2 <- GET('https://api.weatherbit.io/v2.0/current?lat=35.7721&lon=-78.63861&key=XXX&units=I')
content(sample2)
if (!require(httr)) {
install.packages("httr")
library(httr)
}
sample2 <- GET('https://api.weatherbit.io/v2.0/current?lat=35.7721&lon=-78.63861&key=XXX&units=I')
content(sample2)
plot(cars)
v <- c(1, 2, 3)
v <- c(v, 4, 5)
print(v)
var.test(v)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
s <- sd(d)
d <- c(1)
s <- sd(d)
print(s)
d <- c(1, 1)
s <- sd(d)
print(s)
d <- c(1, 1, 1)
s <- sd(d)
print(s)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
t.test(x, y = NULL, alternative = "two.sided", mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95)
t.test(c(2, 7, 6, 4), y = NULL, alternative = "two.sided", mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95)
sample_data <- c(9, 11, 10, 12, 8, 9)
t.test(sample_data, mu = 10)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ggplot(d, aes(x=Month, y=Sales)) +
geom_bar(stat = 'identity', fill = 'blue') +
ggtitle('Monthly Sales') +
xlab('Month') +
ylab('Sales')
d <- data.frame(Month = 1:8, Sales = sales)
sales <- c(120, 150, 130, 170, 200, 180, 160, 190)
d <- data.frame(Month = 1:8, Sales = sales)
ggplot(d, aes(x=Month, y=Sales)) +
geom_bar(stat = 'identity', fill = 'blue') +
ggtitle('Monthly Sales') +
xlab('Month') +
ylab('Sales')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Generate the scatter plot with enhancements
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "dodgerblue", size = 3, alpha = 0.7) +  # Scatter plot points
geom_smooth(method = "lm", color = "darkred", se = TRUE, linetype = "dashed") +  # Trend line
labs(
title = "Relationship Between X and Y",
subtitle = "Scatter plot with linear trend line",
x = "X-axis Label",
y = "Y-axis Label",
caption = "Source: Generated Data"
) +
theme_minimal(base_size = 15) +  # Clean, minimalistic theme
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 20),  # Centered and bold title
plot.subtitle = element_text(hjust = 0.5, size = 16),  # Centered subtitle
plot.caption = element_text(size = 10, face = "italic"),  # Italicized caption
axis.title.x = element_text(face = "bold"),  # Bold x-axis label
axis.title.y = element_text(face = "bold"),  # Bold y-axis label
panel.grid.major = element_line(color = "gray80", linetype = "dotted")  # Customized grid lines
)
source("~/.active-rstudio-document", echo=TRUE)
# Criando a base de dados:
dados <- c(3,   4,   2,   5,   3,   2,   4,   4,   3,   5,   4,   2,   3,   4,   4,   5,   2,   3,   4,   4)
# Calculando a Média:
media_dados <- mean(dados)
# Calculando a Mediana:
mediana_dados <- median(dados)
# Calculando a Moda:
# Baixar e habilitar o pacote DescTools
moda_dados <- Mode(dados)
# Calculando a Moda:
install.packages(DescTools)
# Calculando a Moda:
install.packages('DescTools')
library(DescTools)
moda_dados <- Mode(dados)
# Máximo:
máximo_dados <- max(dados)
#Mínimo:
mínimo_dados <- min(dados)
# Calculando a Amplitude:
# Calculando a Variância:
variancia_dados <- var(dados)
# Calculando o Desvio Padrão:
desvio_padrao_dados <- sd(dados)
# Calculando o Coeficiente de Variação:
cv_dados <- (sd(dados)/mean(dados))*100
# Calculando os Quartis:
quartis_dados <- quantile(dados, probs=c(0.25, 0.50, 0.75))
# Calculando os Decis:
decis_dados <- quantile(dados, probs = seq(0.1, 0.9, by = 0.1))
# Calculando os Centis:
centis_dados <- quantile(dados, probs = seq(0.01, 0.99, by = 0.01))
d = c(35, 42, 28, 50, 39, 45, 37, 41, 33, 48, 30, 44, 36, 38, 43)
mean(d)
sd(d)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
if (!require(ggplot2)) install.packages('ggplot2')
library(ggplot2)
cat(hrs, bgs)
hrs <- (10, 20, 30, 40, 50, 60, 70, 80)
bgs <- (7, 13, 20, 28, 35, 45, 55, 65)
cat(hrs, bgs)
hrs <- c(10, 20, 30, 40, 50, 60, 70, 80)
bgs <- c(7, 13, 20, 28, 35, 45, 55, 65)
cat(hrs, bgs)
cat(hrs, '|', bgs)
df <- data.frame(hrs, bgs)
cat(df)
print(df)
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
geom_smooth(method='lm', se=FALSE) +
theme_minimal() +
xlab('Hours') + ylab('Bugs')
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
geom_smooth(method='lm', se=FALSE) +
theme_minimal()
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
geom_smooth(method='lm', se=FALSE)
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point()
ggplot(df, aes(x=hrs, y=bgs))
# + geom_point()
+ geom_smooth(method='lm', se=FALSE)
ggplot(df, aes(x=hrs, y=bgs))
ggplot(df, aes(x=hrs, y=bgs))
# + geom_point()
+ geom_smooth(method='lm', se=FALSE)
ggplot(df, aes(x=hrs, y=bgs)) +
# + geom_point()
geom_smooth(method='lm', se=FALSE)
ggplot(df, aes(x=hrs, y=bgs)) +
# + geom_point()
geom_smooth(method='lm', se=FALSE)
geom_smooth(method='lm', se=FALSE)
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point()
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
geom_smooth(method='lm', se=FALSE)
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
geom_smooth(method='lm', se=FALSE) +
theme_minimal()
ggplot(df, aes(x=hrs, y=bgs)) +
geom_point() +
geom_smooth(method='lm', se=FALSE) +
theme_minimal() +
xlab('Hours') + ylab('Bugs')
print(df)
m <- lm(bugs ~ hours, data=df)
m <- lm(bgs ~ hrs, data=df)
print(m)
summary(m)
m <- lm(hrs ~ bgs, data=df)
summary(m)
model <- lm(mpg ~ wt + hp, data = mtcars)
summary(model)
8.print(mtcars)
print(mtcars)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
cpx <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
bgs <- c(0, 1, 3, 2, 5, 8, 7, 9, 12, 14)
df <- data.frame(cpx, bgs)
print(df)
mdl <- lm(bgs ~ cpx, data=df)
summary(df)
summary(mdl)
plot(df$cpx, df$bgs)
plot(df$cpx, df$bgs, main='Rel')
plot(df$cpx, df$bgs, main='Rel', xlab='Cpx', ylab='Bgs')
abline(mdl, col='red')
dwtest(mdl)
plot(mdl$fitted.values, resid(mdl))
abline(h=0, col='red')
qqPlot(mdl)
print(df)
plot(mdl$fitted.values, resid(mdl))
abline(h=0, col='red')
plot(df$cpx, df$bgs, main='Rel', xlab='Cpx', ylab='Bgs')
abline(mdl, col='red')
dwtest(mdl)
plot(mdl$fitted.values, resid(mdl))
abline(h=0, col='red')
qqPlot(mdl)
qqPlot(mdl)
qqPlot(mdl)
par(mfrow=c(1,2))
qqPlot(mdl)
qqPlot(mdl)
qqPlot(mdl)
qqPlot(mdl)
e = c(1500, 1600, 1550, 1650, 1700, 1750)
t = c(25, 28, 26, 27, 30, 29)
u = c(60, 55, 58, 59, 50, 52)
s = c(100, 110, 105, 115, 120, 125)
df = data.frame(e, t, u, s)
print(df)
mm = lm(e ~ t + u + s, data = df)
summary(mm)
source("~/.active-rstudio-document", echo=TRUE)
e = c(1500, 1600, 1550, 1650, 1700, 1750)
t = c(25, 28, 26, 27, 30, 29)
u = c(60, 55, 58, 59, 50, 52)
s = c(100, 110, 105, 115, 120, 125)
df = data.frame(e, t, u, s)
mm = lm(e ~ t + u + s, data = df)
summary(mm)
# Passo 1: Definindo os dados
idade <- c(6, 9, 12, 15, 18, 21)
precisao <- c(78, 82, 85, 87, 89, 91)
# Passo 2: Ajustando o modelo de regressão linear simples
modelo <- lm(precisao ~ idade)
# Passo 3: Exibindo o resumo do modelo para obter os coeficientes
summary(modelo)
# Coeficientes da reta de regressão
coef(modelo)
# Passo 1: Definindo os dados
idade <- c(2, 3, 4, 5, 2, 4, 3, 5, 2, 4)
precisao <- c(10, 12, 15, 18, 9, 16, 11, 19, 8, 17)
# Passo 2: Ajustando o modelo de regressão linear simples
modelo <- lm(precisao ~ idade)
# Passo 3: Exibindo o resumo do modelo para obter os coeficientes
summary(modelo)
# Coeficientes da reta de regressão
coef(modelo)
# Passo 1: Definindo os dados
camadas <- c(2, 3, 4, 5, 2, 4, 3, 5, 2, 4)
tempo_treinamento <- c(10, 12, 15, 18, 9, 16, 11, 19, 8, 17)
# Passo 2: Ajustando o modelo de regressão linear simples
modelo <- lm(tempo_treinamento ~ camadas)
# Passo 3: Exibindo o resumo do modelo para obter os coeficientes e o valor de R²
summary(modelo)
# Passo 4: Plotando a relação entre as variáveis para visualização
plot(camadas, tempo_treinamento, main="Regressão Linear: Camadas vs. Tempo de Treinamento",
xlab="Número de Camadas", ylab="Tempo de Treinamento")
abline(modelo, col="red")
# 3. analise exploratoria na variavel Valor
data <- read.xlsx("./Dados_Agronegocio.xlsx")
# 3. analise exploratoria na variavel Valor
data <- read.xlsx("./Dados_Agronegocio.xlsx")
# 3. analise exploratoria na variavel Valor
install.packages("readxl")
library(readxl)
data <- read.xlsx("./Dados_Agronegocio.xlsx")
data <- read.xlsx("Dados_Agronegocio.xlsx")
data <- read.xlsx("\.Dados_Agronegocio.xlsx")
data <- read.xlsx(".Dados_Agronegocio.xlsx")
data <- read.xlsx("./Dados_Agronegocio.xlsx")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.xlsx("Dados_Agronegocio.xlsx")
# 3. analise exploratoria na variavel Valor
install.packages("readxl")
library(readxl)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.xlsx("Dados_Agronegocio.xlsx")
data <- readxl.xlsx("Dados_Agronegocio.xlsx")
data <- read_excel("Dados_Agronegocio.xlsx")
valor <- data$'Valor ($)'
# 3.1. Medidas de Tendência Central
media <- mean(valor)
mediana <- median(valor)
moda <- as.numeric(names(sort(-table(valor)))[1])  # Moda
# 3.2. Medidas de Dispersão
variancia <- var(valor)
desvio_padrao <- sd(valor)
amplitude <- max(valor) - min(valor)
# 3.3. Medidas Separatrizes
quartis <- quantile(valor)
percentis <- quantile(valor, probs = c(0.1, 0.25, 0.5, 0.75, 0.9))
# 3.4. Análise Gráfica
par(mfrow = c(1, 2))  # Configura layout com 2 gráficos
# Histograma
hist(valor, main = "Histograma de Valor ($)", xlab = "Valor ($)", col = "lightblue", border = "black")
# Boxplot
boxplot(valor, main = "Boxplot de Valor ($)", ylab = "Valor ($)", col = "lightgreen")
# Mostrar os resultados
list(
Media = media,
Mediana = mediana,
Moda = moda,
Variancia = variancia,
Desvio_Padrao = desvio_padrao,
Amplitude = amplitude,
Quartis = quartis,
Percentis = percentis
)
# 4.
install.packages("ggplot2")
library(ggplot2)
table(data$'Tipo de Cultivo')
ggplot(data, aes(x = 'Tipo de Cultivo')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Frequência")
data$'Tipo de Cultivo' <- as.factor(data$'Tipo de Cultivo')
ggplot(data, aes(x = 'Tipo de Cultivo')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Frequência")
ggplot(data, aes(x = 'Tipo de Cultivo')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Frequência")
ggplot(data, aes(x = 'Tipo de Cultivo')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Frequência") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotacionando o texto no eixo X
unique(data$'Tipo de Cultivo')
levels(data$'Tipo de Cultivo')
ggplot(data, aes(x = "Tipo de Cultivo")) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Frequência") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotacionar texto do eixo X
unique(data$'Tipo de Cultivo')
levels(data$'Tipo de Cultivo')
data$`Produção Quant. (ton)`
ggplot(data, aes(x = 'Tipo de Cultivo')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Produção Quant. (ton)")
ggplot(data, aes(x = 'Tipo de Cultivo', y = 'Produção Quant. (ton)')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Produção Quant. (ton)")
ggplot(data, aes(x = 'Tipo de Cultivo', y = 'Produção Quant. (ton)')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Produção Quant. (ton)")
ggplot(data, aes(x = 'Tipo de Cultivo', y = 'Valor ($)')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Produção Quant. (ton)")
ggplot(data, aes(y = 'Valor ($)')) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Distribuição dos Tipos de Cultivo", x = "Tipo de Cultivo", y = "Produção Quant. (ton)")
data
ggplot(data, aes(x = 'Tipo de Cultivo')) +
geom_bar() +
labs(title = "Frequência de Tipos de Cultivo",
x = "Tipo de Cultivo",
y = "Frequência")
